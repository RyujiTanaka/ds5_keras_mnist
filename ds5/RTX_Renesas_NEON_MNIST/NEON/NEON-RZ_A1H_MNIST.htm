<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\ryutan01\Documents\DS-5 Workshop 1213\RTX_Renesas_NEON_MNIST\NEON\NEON-RZ_A1H_MNIST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\ryutan01\Documents\DS-5 Workshop 1213\RTX_Renesas_NEON_MNIST\NEON\NEON-RZ_A1H_MNIST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Dec 29 13:54:05 2017
<BR><P>
<H3>Maximum Stack Usage =        592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SVC_Handler &rArr; barman_sample_counters &rArr; barman_sample_counters_with_program_counter &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19]">__Vectors</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[38]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">os_error</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
 <LI><a href="#[16]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">os_idle_demon</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DAbt_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[6]">FIQ_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[e]">OS_Tick_Handler</a> from HAL_CA5.o(.emb_text) referenced from system_Renesas_RZ_A1.o(.text)
 <LI><a href="#[3]">PAbt_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from HAL_CA5.o(.emb_text) referenced from system_Renesas_RZ_A1.o(.text)
 <LI><a href="#[a]">RZ_A1H_GENMAI_SetSramWriteEnable</a> from RZ_A1H_GENMAI_Init.o(.text) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[0]">Reset_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[2]">SVC_Handler</a> from HAL_CA5.o(.emb_text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[b]">SystemInit</a> from system_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[1]">Undef_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[f]">__SVC_1</a> from system_Renesas_RZ_A1.o(.text) referenced from SVC_Table.o(SVC_TABLE)
 <LI><a href="#[19]">__Vectors</a> from startup_Renesas_RZ_A1.o(RESET) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[1a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[10]">fputc</a> from fputc.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[18]">main</a> from system_Renesas_RZ_A1.o(.text) referenced from RTX_Conf_CM.o(.constdata)
 <LI><a href="#[17]">osThreadExit</a> from rt_CMSIS.o(i.osThreadExit) referenced from rt_CMSIS.o(i.svcThreadCreate)
 <LI><a href="#[16]">os_idle_demon</a> from RTX_Conf_CM.o(.text) referenced from rt_Task.o(i.rt_sys_init)
 <LI><a href="#[7]">rt_alloc_box</a> from rt_MemBox.o(i.rt_alloc_box) referenced from HAL_CA5.o(.emb_text)
 <LI><a href="#[8]">rt_free_box</a> from rt_MemBox.o(i.rt_free_box) referenced from HAL_CA5.o(.emb_text)
 <LI><a href="#[11]">svcKernelInitialize</a> from rt_CMSIS.o(i.svcKernelInitialize) referenced from rt_CMSIS.o(i.osKernelInitialize)
 <LI><a href="#[12]">svcKernelStart</a> from rt_CMSIS.o(i.svcKernelStart) referenced from rt_CMSIS.o(i.osKernelStart)
 <LI><a href="#[13]">svcThreadCreate</a> from rt_CMSIS.o(i.svcThreadCreate) referenced from rt_CMSIS.o(i.osThreadCreate)
 <LI><a href="#[14]">svcThreadGetId</a> from rt_CMSIS.o(i.svcThreadGetId) referenced from rt_CMSIS.o(i.osThreadExit)
 <LI><a href="#[15]">svcThreadTerminate</a> from rt_CMSIS.o(i.svcThreadTerminate) referenced from rt_CMSIS.o(i.osThreadExit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>__Vectors</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup_Renesas_RZ_A1.o(RESET))

<P><STRONG><a name="[1a]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[b6]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1b]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
</UL>

<P><STRONG><a name="[85]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
</UL>

<P><STRONG><a name="[b7]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b8]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b9]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ba]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d]"></a>_main_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _main_init &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate (via BLX)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart (via BLX)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize (via BLX)
</UL>

<P><STRONG><a name="[53]"></a>__sync_fetch_and_add_8</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
</UL>

<P><STRONG><a name="[56]"></a>__sync_sub_and_fetch_8</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_get_block
</UL>

<P><STRONG><a name="[42]"></a>__sync_val_compare_and_swap_8</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_add_task_record
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_read_counter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_get_block
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_pmu_settings
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
</UL>

<P><STRONG><a name="[55]"></a>__sync_bool_compare_and_swap_8</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_get_block
</UL>

<P><STRONG><a name="[bb]"></a>__sync_fetch_and_add_4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, barman.o(.emb_text), UNUSED)

<P><STRONG><a name="[bc]"></a>__sync_sub_and_fetch_4</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, barman.o(.emb_text), UNUSED)

<P><STRONG><a name="[45]"></a>__sync_val_compare_and_swap_4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_add_task_record
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_map_multiprocessor_affinity_to_core_no
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_string_table_insert
</UL>

<P><STRONG><a name="[6b]"></a>__sync_bool_compare_and_swap_4</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
</UL>

<P><STRONG><a name="[bd]"></a>__sync_bool_compare_and_swap_2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, barman.o(.emb_text), UNUSED)

<P><STRONG><a name="[be]"></a>__sync_fetch_and_add_1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, barman.o(.emb_text), UNUSED)

<P><STRONG><a name="[bf]"></a>__sync_sub_and_fetch_1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, barman.o(.emb_text), UNUSED)

<P><STRONG><a name="[4d]"></a>__sync_val_compare_and_swap_1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_try_change_pmu_state
</UL>

<P><STRONG><a name="[67]"></a>__sync_bool_compare_and_swap_1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_initialize
</UL>

<P><STRONG><a name="[3c]"></a>__sync_synchronize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, barman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_close
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_add_task_record
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_read_counter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_get_block
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_disable_sampling
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_pmu_settings
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize_pmu_family
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_string_table_insert
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_try_change_pmu_state
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_enable_sampling
</UL>

<P><STRONG><a name="[c0]"></a>__asm___22_system_Renesas_RZ_A1_c___SVC_1____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c1]"></a>__asm___22_system_Renesas_RZ_A1_c___SVC_1____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c2]"></a>__asm___22_system_Renesas_RZ_A1_c___SVC_1____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text), UNUSED)

<P><STRONG><a name="[81]"></a>FPUEnable</STRONG> (ARM, 180 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUndefHandler (via BLX)
</UL>

<P><STRONG><a name="[c3]"></a>__asm___9_HAL_CA5_c_7784c55f____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text), UNUSED)

<P><STRONG><a name="[c4]"></a>__asm___9_HAL_CA5_c_7784c55f____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text), UNUSED)

<P><STRONG><a name="[c5]"></a>__asm___9_HAL_CA5_c_7784c55f____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text), UNUSED)

<P><STRONG><a name="[c6]"></a>rt_set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab]"></a>rt_get_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete (via BLX)
</UL>

<P><STRONG><a name="[c7]"></a>_alloc_box</STRONG> (ARM, 24 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text), UNUSED)

<P><STRONG><a name="[c8]"></a>_free_box</STRONG> (ARM, 24 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>SVC_Handler</STRONG> (ARM, 680 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SVC_Handler &rArr; barman_sample_counters &rArr; barman_sample_counters_with_program_counter &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_unlock (via BLX)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check (via BLX)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_record_task_switch (via BLX)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (ARM, 88 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>OS_Tick_Handler</STRONG> (ARM, 108 bytes, Stack size 0 bytes, HAL_CA5.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = OS_Tick_Handler &rArr; barman_sample_counters_with_program_counter &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick (via BLX)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter (via BLX)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack (via BLX)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_timestamp_counter (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>__asm___10_rt_CMSIS_c_8216d75d____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart (via BLX)
</UL>

<P><STRONG><a name="[90]"></a>__asm___10_rt_CMSIS_c_8216d75d____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart (via BLX)
</UL>

<P><STRONG><a name="[c9]"></a>__asm___10_rt_CMSIS_c_8216d75d____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 392 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Reset_Handler &rArr; create_translation_table &rArr; __get_page_descriptor &rArr; __memory_page
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 116 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Undef_Handler &rArr; CUndefHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUndefHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 56 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAbtHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 60 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDAbtHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 252 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>increment_timestamp_counter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, NEON.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[50]"></a>barman_ext_get_timestamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, NEON.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_after_idle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_before_idle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_wfe
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_wfi
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_record_task_switch
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
</UL>

<P><STRONG><a name="[2f]"></a>barman_ext_get_current_task_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, NEON.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_record_task_switch
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>

<P><STRONG><a name="[31]"></a>$Super$$main</STRONG> (Thumb, 132 bytes, Stack size 136 bytes, NEON.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = $Super$$main &rArr; barman_enable_sampling &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time_get
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_enable_sampling
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_marker
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>os_idle_demon</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_Task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[38]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[39]"></a>os_tick_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_A1H_GENMAI_IsClockMode0
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[ca]"></a>os_tick_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>os_tick_ovf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[a]"></a>RZ_A1H_GENMAI_SetSramWriteEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>RZ_A1H_GENMAI_InitClock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3a]"></a>RZ_A1H_GENMAI_IsClockMode0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>

<P><STRONG><a name="[80]"></a>RZ_A1H_GENMAI_InitBus</STRONG> (Thumb, 672 bytes, Stack size 4 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RZ_A1H_GENMAI_InitBus
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3b]"></a>barman_initialize_pmu_family</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = barman_initialize_pmu_family
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_generated_initialize
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize
</UL>

<P><STRONG><a name="[3f]"></a>barman_generated_initialize</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize_pmu_family
</UL>

<P><STRONG><a name="[43]"></a>barman_cache_clean</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_pmu_settings
</UL>

<P><STRONG><a name="[cc]"></a>barman_ext_map_multiprocessor_affinity_to_cluster_no</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, barman.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>barman_protocol_write_pmu_settings</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = barman_protocol_write_pmu_settings
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_cache_clean
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_8
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_debug
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
</UL>

<P><STRONG><a name="[49]"></a>barman_ext_enable_interrupts_local</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_read_counter
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_init
</UL>

<P><STRONG><a name="[48]"></a>barman_ext_disable_interrupts_local</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_read_counter
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_init
</UL>

<P><STRONG><a name="[44]"></a>barman_ext_map_multiprocessor_affinity_to_core_no</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_4
</UL>

<P><STRONG><a name="[46]"></a>barman_get_core_no</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_after_idle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_before_idle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_wfe
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_wfi
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_record_task_switch
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_read_counter
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_start
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_stop
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_try_change_pmu_state
</UL>

<P><STRONG><a name="[47]"></a>barman_arm_pmu_init</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_disable_interrupts_local
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_enable_interrupts_local
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
</UL>

<P><STRONG><a name="[4a]"></a>barman_arm_pmu_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
</UL>

<P><STRONG><a name="[4b]"></a>barman_arm_pmu_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
</UL>

<P><STRONG><a name="[33]"></a>barman_enable_sampling</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = barman_enable_sampling &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_try_change_pmu_state
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[51]"></a>barman_disable_sampling</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_try_change_pmu_state
</UL>

<P><STRONG><a name="[52]"></a>barman_linear_ram_buffer_commit_block</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = barman_linear_ram_buffer_commit_block
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_cache_clean
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_8
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_fetch_and_add_8
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_annotation
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_halt_event
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_record_task_switch
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_task_switch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_sample
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>

<P><STRONG><a name="[54]"></a>barman_linear_ram_buffer_get_block</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = barman_linear_ram_buffer_get_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_bool_compare_and_swap_8
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_sub_and_fetch_8
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
</UL>

<P><STRONG><a name="[58]"></a>barman_protocol_write_sample</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = barman_protocol_write_sample &rArr; barman_protocol_get_block_and_fill_header &rArr; barman_linear_ram_buffer_get_block
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
</UL>

<P><STRONG><a name="[59]"></a>barman_arm_pmu_read_counter</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = barman_arm_pmu_read_counter &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_disable_interrupts_local
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_enable_interrupts_local
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_8
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
</UL>

<P><STRONG><a name="[28]"></a>barman_sample_counters_with_program_counter</STRONG> (Thumb, 142 bytes, Stack size 328 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = barman_sample_counters_with_program_counter &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_read_counter
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_sample
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_current_task_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters
</UL>

<P><STRONG><a name="[23]"></a>barman_sample_counters</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = barman_sample_counters &rArr; barman_sample_counters_with_program_counter &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
</UL>

<P><STRONG><a name="[5a]"></a>barman_protocol_write_task_switch</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
</UL>

<P><STRONG><a name="[22]"></a>barman_record_task_switch</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = barman_record_task_switch &rArr; barman_protocol_get_block_and_fill_header &rArr; barman_linear_ram_buffer_get_block
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_current_task_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
</UL>

<P><STRONG><a name="[5b]"></a>barman_protocol_write_halt_event</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_after_idle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_before_idle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_wfe
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_wfi
</UL>

<P><STRONG><a name="[5c]"></a>barman_wfi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_halt_event
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
</UL>

<P><STRONG><a name="[5d]"></a>barman_wfe</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_halt_event
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
</UL>

<P><STRONG><a name="[5e]"></a>barman_before_idle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_halt_event
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
</UL>

<P><STRONG><a name="[5f]"></a>barman_after_idle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_halt_event
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
</UL>

<P><STRONG><a name="[60]"></a>barman_protocol_write_annotation</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[63]"></a>barman_annotate_channel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>

<P><STRONG><a name="[64]"></a>barman_annotate_name_channel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>

<P><STRONG><a name="[65]"></a>barman_annotate_name_group</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>

<P><STRONG><a name="[35]"></a>barman_annotate_marker</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = barman_annotate_marker &rArr; barman_annotate_generic_string &rArr; barman_protocol_get_block_and_fill_header &rArr; barman_linear_ram_buffer_get_block
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
</UL>

<P><STRONG><a name="[66]"></a>barman_linear_ram_buffer_initialize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_bool_compare_and_swap_1
</UL>

<P><STRONG><a name="[6a]"></a>barman_protocol_initialize</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = barman_protocol_initialize &rArr; barman_protocol_string_table_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_cache_clean
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_bool_compare_and_swap_1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_bool_compare_and_swap_4
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_string_table_insert
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize
</UL>

<P><STRONG><a name="[32]"></a>barman_initialize</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = barman_initialize &rArr; barman_protocol_initialize &rArr; barman_protocol_string_table_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize_pmu_family
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[6c]"></a>barman_add_task_record</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_8
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_string_table_insert
</UL>

<P><STRONG><a name="[6d]"></a>barman_linear_ram_buffer_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, barman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
</UL>

<P><STRONG><a name="[cd]"></a>relu</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cnn.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>convolution</STRONG> (Thumb, 636 bytes, Stack size 36 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = convolution
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
</UL>

<P><STRONG><a name="[6f]"></a>max_pooling</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = max_pooling
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
</UL>

<P><STRONG><a name="[70]"></a>fully_connected</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fully_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
</UL>

<P><STRONG><a name="[ce]"></a>pre_proc</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, cnn.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>post_proc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cnn.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>mnist_cnn_eval</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mnist_cnn_eval &rArr; barman_annotate_marker &rArr; barman_annotate_generic_string &rArr; barman_protocol_get_block_and_fill_header &rArr; barman_linear_ram_buffer_get_block
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fully_connected
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_pooling
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convolution
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d0]"></a>GIC_EnableDistributor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>GIC_DisableDistributor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>GIC_DistributorInfo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>GIC_DistributorImplementer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>GIC_SetTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>GIC_SetICDICFR</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>GIC_GetTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>GIC_EnableInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>GIC_DisableInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>GIC_AcknowledgePending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>GIC_EndInterrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>GIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>GIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>GIC_SetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>GIC_ClearPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>GIC_SetLevelModel</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>GIC_SetPriority</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>GIC_GetPriority</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>GIC_InterfacePriorityMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>GIC_SetBinaryPoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>GIC_GetBinaryPoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>GIC_GetIRQStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>GIC_SendSGI</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>GIC_DistInit</STRONG> (Thumb, 264 bytes, Stack size 20 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GIC_DistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
</UL>

<P><STRONG><a name="[73]"></a>GIC_CPUInterfaceInit</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GIC_CPUInterfaceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
</UL>

<P><STRONG><a name="[71]"></a>GIC_Enable</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GIC_Enable &rArr; GIC_CPUInterfaceInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>create_translation_table</STRONG> (Thumb, 744 bytes, Stack size 40 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = create_translation_table &rArr; __get_page_descriptor &rArr; __memory_page
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTSection
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_section_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler (via BLX)
</UL>

<P><STRONG><a name="[e7]"></a>PL310_Sync</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>PL310_GetID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pl310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[e8]"></a>PL310_GetType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>PL310_InvAllByWay</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pl310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[e9]"></a>PL310_CleanInvAllByWay</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>PL310_Enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pl310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via Veneer)
</UL>

<P><STRONG><a name="[ea]"></a>PL310_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>PL310_InvPa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>PL310_CleanPa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>PL310_CleanInvPa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>__SVC_1</STRONG> (ARM, 40 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __SVC_1
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_btac (via BLX)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_caches (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL310_Enable (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL310_InvAllByWay (via BLX)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL310_GetID (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SVC_Table.o(SVC_TABLE)
</UL>
<P><STRONG><a name="[ee]"></a>InterruptHandlerRegister</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>InterruptHandlerUnregister</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; GIC_Enable &rArr; GIC_CPUInterfaceInit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_A1H_GENMAI_InitBus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_A1H_GENMAI_InitClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = main &rArr; $Super$$main &rArr; barman_enable_sampling &rArr; barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_Conf_CM.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>CDAbtHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler (via BLX)
</UL>

<P><STRONG><a name="[2d]"></a>CPAbtHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler (via BLX)
</UL>

<P><STRONG><a name="[2c]"></a>CUndefHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUndefHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler (via BLX)
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_annotation
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via BLX)
</UL>

<P><STRONG><a name="[f6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f9]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[37]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[fa]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a4]"></a>_init_box</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, rt_MemBox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[10]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[8b]"></a>isrMessagePut</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_CMSIS.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[8d]"></a>isr_mbx_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rt_Mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[1e]"></a>osKernelInitialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rt_CMSIS.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[20]"></a>osKernelStart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_CMSIS.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_rt_CMSIS_c_8216d75d____set_CPS_USR (via BLX)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[1f]"></a>osThreadCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_CMSIS.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[17]"></a>osThreadExit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_CMSIS.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[7]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_MemBox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HAL_CA5.o(.emb_text)
</UL>
<P><STRONG><a name="[b2]"></a>rt_alloc_mem</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rt_Memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[91]"></a>rt_chk_robin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_Robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[94]"></a>rt_dec_dly</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rt_List.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[95]"></a>rt_dispatch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_Task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[98]"></a>rt_evt_psh</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_Event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[8]"></a>rt_free_box</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rt_MemBox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HAL_CA5.o(.emb_text)
</UL>
<P><STRONG><a name="[b3]"></a>rt_free_mem</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_Memory.o(i.rt_free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[92]"></a>rt_get_first</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_List.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[ad]"></a>rt_init_mem</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_Memory.o(i.rt_init_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[a5]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_Robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[9c]"></a>rt_init_stack</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, HAL_CA.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[8c]"></a>rt_mbx_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_Mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[b1]"></a>rt_mbx_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_Mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[9d]"></a>rt_mbx_psh</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, rt_Mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[26]"></a>rt_pop_req</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rt_System.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via BLX)
</UL>

<P><STRONG><a name="[8f]"></a>rt_psh_req</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_System.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[8e]"></a>rt_psq_enq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rt_List.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[93]"></a>rt_put_prio</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, rt_List.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
</UL>

<P><STRONG><a name="[97]"></a>rt_put_rdy_first</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_List.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[a0]"></a>rt_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_List.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[9e]"></a>rt_ret_val</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, HAL_CA.o(i.rt_ret_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[9a]"></a>rt_ret_val2</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, HAL_CA.o(i.rt_ret_val2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[99]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_List.o(i.rt_rmv_dly))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[a1]"></a>rt_rmv_list</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rt_List.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
</UL>

<P><STRONG><a name="[9f]"></a>rt_sem_psh</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_Semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_psh &rArr; rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[25]"></a>rt_stk_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_System.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[96]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_Task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[a3]"></a>rt_sys_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, rt_Task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[a6]"></a>rt_sys_start</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_Task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_sys_start &rArr; os_tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[2a]"></a>rt_systick</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_System.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[34]"></a>rt_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_Time.o(i.rt_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a8]"></a>rt_tsk_create</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, rt_Task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[aa]"></a>rt_tsk_delete</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, rt_Task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[21]"></a>rt_tsk_lock</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, rt_System.o(i.rt_tsk_lock))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via BLX)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[ac]"></a>rt_tsk_prio</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_Task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[30]"></a>rt_tsk_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_Task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_current_task_id
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[24]"></a>rt_tsk_unlock</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, rt_System.o(i.rt_tsk_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
</UL>

<P><STRONG><a name="[11]"></a>svcKernelInitialize</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[12]"></a>svcKernelStart</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_rt_CMSIS_c_8216d75d____set_PSP (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[ae]"></a>svcMessageCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_CMSIS.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[13]"></a>svcThreadCreate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_CMSIS.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[14]"></a>svcThreadGetId</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[15]"></a>svcThreadTerminate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rt_CMSIS.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[a7]"></a>sysTimerTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_CMSIS.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4c]"></a>barman_try_change_pmu_state</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = barman_try_change_pmu_state &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_1
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_disable_sampling
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_enable_sampling
</UL>

<P><STRONG><a name="[4e]"></a>barman_transition_pmu_state_on_sample</STRONG> (Thumb, 686 bytes, Stack size 192 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = barman_transition_pmu_state_on_sample &rArr; barman_arm_pmu_init &rArr; barman_get_core_no
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_arm_pmu_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_pmu_settings
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_1
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_debug
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_info
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_try_change_pmu_state
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_sample_counters_with_program_counter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_disable_sampling
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_enable_sampling
</UL>

<P><STRONG><a name="[57]"></a>barman_protocol_get_block_and_fill_header</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = barman_protocol_get_block_and_fill_header &rArr; barman_linear_ram_buffer_get_block
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_get_block
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_8
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_debug
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_annotation
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_halt_event
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_record_task_switch
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_task_switch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_sample
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_generic_string
</UL>

<P><STRONG><a name="[62]"></a>barman_annotate_generic_string</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = barman_annotate_generic_string &rArr; barman_protocol_get_block_and_fill_header &rArr; barman_linear_ram_buffer_get_block
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_linear_ram_buffer_commit_block
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_get_core_no
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_current_task_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_get_timestamp
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_name_group
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_name_channel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_channel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_annotate_marker
</UL>

<P><STRONG><a name="[68]"></a>barman_protocol_string_table_insert</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, barman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = barman_protocol_string_table_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_synchronize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_val_compare_and_swap_4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_warning
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_ext_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_add_task_record
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
</UL>

<P><STRONG><a name="[3e]"></a>barman_ext_log_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize_pmu_family
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
</UL>

<P><STRONG><a name="[3d]"></a>barman_ext_log_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_add_task_record
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_initialize
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_pmu_settings
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize_pmu_family
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_string_table_insert
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_initialize
</UL>

<P><STRONG><a name="[41]"></a>barman_ext_log_debug</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_write_pmu_settings
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_get_block_and_fill_header
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_transition_pmu_state_on_sample
</UL>

<P><STRONG><a name="[69]"></a>barman_ext_log_warning</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, barman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barman_protocol_string_table_insert
</UL>

<P><STRONG><a name="[74]"></a>__get_section_descriptor</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __get_section_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_section
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[76]"></a>__get_page_descriptor</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __get_page_descriptor &rArr; __memory_page
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_page
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ap_page
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[79]"></a>__TTSection</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __TTSection
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[78]"></a>__ap_page</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[75]"></a>__memory_section</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_page
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_section_descriptor
</UL>

<P><STRONG><a name="[77]"></a>__memory_page</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __memory_page
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_section
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[7a]"></a>__enable_caches</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[7b]"></a>__enable_btac</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[a2]"></a>rt_ret_regs</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, HAL_CA.o(i.rt_ret_regs))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>

<P><STRONG><a name="[88]"></a>__exceptional_mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_CMSIS.o(i.__exceptional_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __exceptional_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[89]"></a>__get_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_CMSIS.o(i.__get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
</UL>

<P><STRONG><a name="[b4]"></a>rt_tid2ptcb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_CMSIS.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[b5]"></a>rt_timer_insert</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rt_CMSIS.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[af]"></a>sysThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_CMSIS.o(i.sysThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[a9]"></a>rt_get_TID</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_Task.o(i.rt_get_TID))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[9b]"></a>rt_init_context</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_Task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[87]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
