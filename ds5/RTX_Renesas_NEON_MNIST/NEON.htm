<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [../NEON.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ../NEON.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Oct 13 02:21:08 2017
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; mnist_cnn_eval &rArr; max_pooling
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19]">__Vectors</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">os_error</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
 <LI><a href="#[16]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">os_idle_demon</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DAbt_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[6]">FIQ_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[e]">OS_Tick_Handler</a> from HAL_CA9.o(.emb_text) referenced from system_Renesas_RZ_A1.o(.text)
 <LI><a href="#[3]">PAbt_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from HAL_CA9.o(.emb_text) referenced from system_Renesas_RZ_A1.o(.text)
 <LI><a href="#[a]">RZ_A1H_GENMAI_SetSramWriteEnable</a> from RZ_A1H_GENMAI_Init.o(.text) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[0]">Reset_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[2]">SVC_Handler</a> from HAL_CA9.o(.emb_text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[b]">SystemInit</a> from system_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[1]">Undef_Handler</a> from startup_Renesas_RZ_A1.o(.text) referenced from startup_Renesas_RZ_A1.o(RESET)
 <LI><a href="#[f]">__SVC_1</a> from system_Renesas_RZ_A1.o(.text) referenced from SVC_Table.o(SVC_TABLE)
 <LI><a href="#[19]">__Vectors</a> from startup_Renesas_RZ_A1.o(RESET) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[1a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_Renesas_RZ_A1.o(.text)
 <LI><a href="#[10]">fputc</a> from fputc.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[18]">main</a> from system_Renesas_RZ_A1.o(.text) referenced from RTX_Conf_CM.o(.constdata)
 <LI><a href="#[17]">osThreadExit</a> from rt_CMSIS.o(i.osThreadExit) referenced from rt_CMSIS.o(i.svcThreadCreate)
 <LI><a href="#[16]">os_idle_demon</a> from RTX_Conf_CM.o(.text) referenced from rt_Task.o(i.rt_sys_init)
 <LI><a href="#[7]">rt_alloc_box</a> from rt_MemBox.o(i.rt_alloc_box) referenced from HAL_CA9.o(.emb_text)
 <LI><a href="#[8]">rt_free_box</a> from rt_MemBox.o(i.rt_free_box) referenced from HAL_CA9.o(.emb_text)
 <LI><a href="#[11]">svcKernelInitialize</a> from rt_CMSIS.o(i.svcKernelInitialize) referenced from rt_CMSIS.o(i.osKernelInitialize)
 <LI><a href="#[12]">svcKernelStart</a> from rt_CMSIS.o(i.svcKernelStart) referenced from rt_CMSIS.o(i.osKernelStart)
 <LI><a href="#[13]">svcThreadCreate</a> from rt_CMSIS.o(i.svcThreadCreate) referenced from rt_CMSIS.o(i.osThreadCreate)
 <LI><a href="#[14]">svcThreadGetId</a> from rt_CMSIS.o(i.svcThreadGetId) referenced from rt_CMSIS.o(i.osThreadExit)
 <LI><a href="#[15]">svcThreadTerminate</a> from rt_CMSIS.o(i.svcThreadTerminate) referenced from rt_CMSIS.o(i.osThreadExit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>__Vectors</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup_Renesas_RZ_A1.o(RESET))

<P><STRONG><a name="[1a]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[75]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1b]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
</UL>

<P><STRONG><a name="[43]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
</UL>

<P><STRONG><a name="[76]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[77]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[78]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[79]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d]"></a>_main_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _main_init &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate (via BLX)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart (via BLX)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize (via BLX)
</UL>

<P><STRONG><a name="[7a]"></a>__asm___22_system_Renesas_RZ_A1_c___SVC_1____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text), UNUSED)

<P><STRONG><a name="[7b]"></a>__asm___22_system_Renesas_RZ_A1_c___SVC_1____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text), UNUSED)

<P><STRONG><a name="[7c]"></a>__asm___22_system_Renesas_RZ_A1_c___SVC_1____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text), UNUSED)

<P><STRONG><a name="[42]"></a>FPUEnable</STRONG> (ARM, 180 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUndefHandler (via BLX)
</UL>

<P><STRONG><a name="[7d]"></a>__asm___9_HAL_CA9_c_7784c55f____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[7e]"></a>__asm___9_HAL_CA9_c_7784c55f____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[7f]"></a>__asm___9_HAL_CA9_c_7784c55f____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[80]"></a>rt_set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[69]"></a>rt_get_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete (via BLX)
</UL>

<P><STRONG><a name="[81]"></a>_alloc_box</STRONG> (ARM, 24 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[82]"></a>_free_box</STRONG> (ARM, 24 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>SVC_Handler</STRONG> (ARM, 656 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler &rArr; rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_unlock (via BLX)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (ARM, 88 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>OS_Tick_Handler</STRONG> (ARM, 92 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OS_Tick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick (via BLX)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>__asm___10_rt_CMSIS_c_8216d75d____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart (via BLX)
</UL>

<P><STRONG><a name="[4e]"></a>__asm___10_rt_CMSIS_c_8216d75d____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart (via BLX)
</UL>

<P><STRONG><a name="[83]"></a>__asm___10_rt_CMSIS_c_8216d75d____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 392 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Reset_Handler &rArr; create_translation_table &rArr; __get_page_descriptor &rArr; __memory_page
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 116 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Undef_Handler &rArr; CUndefHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUndefHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 56 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAbtHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 60 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDAbtHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 244 bytes, Stack size 0 bytes, startup_Renesas_RZ_A1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>$Super$$main</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, NEON.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = $Super$$main &rArr; mnist_cnn_eval &rArr; max_pooling
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time_get
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>os_idle_demon</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_Task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[2f]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[30]"></a>os_tick_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_A1H_GENMAI_IsClockMode0
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[84]"></a>os_tick_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>os_tick_ovf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[a]"></a>RZ_A1H_GENMAI_SetSramWriteEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>RZ_A1H_GENMAI_InitClock</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[31]"></a>RZ_A1H_GENMAI_IsClockMode0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>

<P><STRONG><a name="[41]"></a>RZ_A1H_GENMAI_InitBus</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, RZ_A1H_GENMAI_Init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RZ_A1H_GENMAI_InitBus
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[86]"></a>relu</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cnn.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>convolution</STRONG> (Thumb, 706 bytes, Stack size 56 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = convolution
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
</UL>

<P><STRONG><a name="[33]"></a>max_pooling</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = max_pooling
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
</UL>

<P><STRONG><a name="[34]"></a>fully_connected</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fully_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnist_cnn_eval
</UL>

<P><STRONG><a name="[87]"></a>pre_proc</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, cnn.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>post_proc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cnn.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>mnist_cnn_eval</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, cnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mnist_cnn_eval &rArr; max_pooling
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fully_connected
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_pooling
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convolution
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[89]"></a>GIC_EnableDistributor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>GIC_DisableDistributor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>GIC_DistributorInfo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>GIC_DistributorImplementer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>GIC_SetTarget</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>GIC_SetICDICFR</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>GIC_GetTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>GIC_EnableInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>GIC_DisableInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>GIC_AcknowledgePending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>GIC_EndInterrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>GIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>GIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>GIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>GIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>GIC_SetLevelModel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>GIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>GIC_GetPriority</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>GIC_InterfacePriorityMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>GIC_SetBinaryPoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>GIC_GetBinaryPoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>GIC_GetIRQStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>GIC_SendSGI</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>GIC_DistInit</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GIC_DistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
</UL>

<P><STRONG><a name="[a0]"></a>GIC_CPUInterfaceInit</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>GIC_Enable</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GIC_Enable &rArr; GIC_DistInit
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27]"></a>create_translation_table</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = create_translation_table &rArr; __get_page_descriptor &rArr; __memory_page
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTSection
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_section_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler (via BLX)
</UL>

<P><STRONG><a name="[a1]"></a>PL310_Sync</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>PL310_GetID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pl310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[a2]"></a>PL310_GetType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>PL310_InvAllByWay</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pl310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[a3]"></a>PL310_CleanInvAllByWay</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>PL310_Enable</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, pl310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PL310_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via Veneer)
</UL>

<P><STRONG><a name="[a4]"></a>PL310_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>PL310_InvPa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>PL310_CleanPa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>PL310_CleanInvPa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pl310.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>__SVC_1</STRONG> (ARM, 40 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __SVC_1 &rArr; PL310_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_btac (via BLX)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_caches (via BLX)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL310_Enable (via Veneer)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL310_InvAllByWay (via BLX)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL310_GetID (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SVC_Table.o(SVC_TABLE)
</UL>
<P><STRONG><a name="[a8]"></a>InterruptHandlerRegister</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>InterruptHandlerUnregister</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; GIC_Enable &rArr; GIC_DistInit
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_A1H_GENMAI_InitBus
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_A1H_GENMAI_InitClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_Renesas_RZ_A1.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; $Super$$main &rArr; mnist_cnn_eval &rArr; max_pooling
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_Conf_CM.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>CDAbtHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler (via BLX)
</UL>

<P><STRONG><a name="[29]"></a>CPAbtHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler (via BLX)
</UL>

<P><STRONG><a name="[28]"></a>CUndefHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUndefHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler (via BLX)
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via BLX)
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ae]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[2e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[af]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[62]"></a>_init_box</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, rt_MemBox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[10]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[49]"></a>isrMessagePut</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_CMSIS.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[4b]"></a>isr_mbx_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rt_Mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[1e]"></a>osKernelInitialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rt_CMSIS.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[20]"></a>osKernelStart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_CMSIS.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_rt_CMSIS_c_8216d75d____set_CPS_USR (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[1f]"></a>osThreadCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_CMSIS.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[17]"></a>osThreadExit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_CMSIS.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[7]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_MemBox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HAL_CA9.o(.emb_text)
</UL>
<P><STRONG><a name="[70]"></a>rt_alloc_mem</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rt_Memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[4f]"></a>rt_chk_robin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_Robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[52]"></a>rt_dec_dly</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rt_List.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[53]"></a>rt_dispatch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_Task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[56]"></a>rt_evt_psh</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_Event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[8]"></a>rt_free_box</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rt_MemBox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HAL_CA9.o(.emb_text)
</UL>
<P><STRONG><a name="[71]"></a>rt_free_mem</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_Memory.o(i.rt_free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[50]"></a>rt_get_first</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_List.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[6b]"></a>rt_init_mem</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_Memory.o(i.rt_init_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[63]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_Robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[5a]"></a>rt_init_stack</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, HAL_CA.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[4a]"></a>rt_mbx_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_Mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[6f]"></a>rt_mbx_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_Mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[5b]"></a>rt_mbx_psh</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, rt_Mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[24]"></a>rt_pop_req</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rt_System.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via BLX)
</UL>

<P><STRONG><a name="[4d]"></a>rt_psh_req</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_System.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[4c]"></a>rt_psq_enq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rt_List.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[51]"></a>rt_put_prio</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, rt_List.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[55]"></a>rt_put_rdy_first</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_List.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[5e]"></a>rt_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_List.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[5c]"></a>rt_ret_val</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, HAL_CA.o(i.rt_ret_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[58]"></a>rt_ret_val2</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, HAL_CA.o(i.rt_ret_val2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[57]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_List.o(i.rt_rmv_dly))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[5f]"></a>rt_rmv_list</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rt_List.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[5d]"></a>rt_sem_psh</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_Semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_psh &rArr; rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[23]"></a>rt_stk_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_System.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[54]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_Task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[61]"></a>rt_sys_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, rt_Task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[64]"></a>rt_sys_start</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_Task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_sys_start &rArr; os_tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[26]"></a>rt_systick</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_System.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[2c]"></a>rt_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_Time.o(i.rt_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[66]"></a>rt_tsk_create</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, rt_Task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[68]"></a>rt_tsk_delete</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, rt_Task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[21]"></a>rt_tsk_lock</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, rt_System.o(i.rt_tsk_lock))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via BLX)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[6a]"></a>rt_tsk_prio</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_Task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[72]"></a>rt_tsk_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_Task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[22]"></a>rt_tsk_unlock</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, rt_System.o(i.rt_tsk_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
</UL>

<P><STRONG><a name="[11]"></a>svcKernelInitialize</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[12]"></a>svcKernelStart</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_rt_CMSIS_c_8216d75d____set_PSP (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[6c]"></a>svcMessageCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_CMSIS.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[13]"></a>svcThreadCreate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_CMSIS.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[14]"></a>svcThreadGetId</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[15]"></a>svcThreadTerminate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rt_CMSIS.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[65]"></a>sysTimerTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_CMSIS.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[39]"></a>__get_section_descriptor</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __get_section_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[37]"></a>__get_page_descriptor</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __get_page_descriptor &rArr; __memory_page
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_page
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[3a]"></a>__TTSection</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __TTSection
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[38]"></a>__memory_page</STRONG> (Thumb, 236 bytes, Stack size 4 bytes, mmu_Renesas_RZ_A1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __memory_page
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[3b]"></a>__enable_caches</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[3c]"></a>__enable_btac</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_Renesas_RZ_A1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[60]"></a>rt_ret_regs</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, HAL_CA.o(i.rt_ret_regs))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>

<P><STRONG><a name="[46]"></a>__exceptional_mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_CMSIS.o(i.__exceptional_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __exceptional_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[47]"></a>__get_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_CMSIS.o(i.__get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[73]"></a>rt_tid2ptcb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_CMSIS.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[74]"></a>rt_timer_insert</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rt_CMSIS.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[6d]"></a>sysThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_CMSIS.o(i.sysThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[67]"></a>rt_get_TID</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_Task.o(i.rt_get_TID))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[59]"></a>rt_init_context</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_Task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[45]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
